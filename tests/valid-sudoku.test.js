const { isValidSudoku } = require("../solutions/valid-sudoku");

describe("isValidSudoku", () => {
  test("should return true for a valid Sudoku board", () => {
    const board = [
      ["5", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];
    expect(isValidSudoku(board)).toBe(true);
  });

  test("should return false for a board with duplicate numbers in a row", () => {
    const board = [
      ["8", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"], // Duplicate '8' in row
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];
    expect(isValidSudoku(board)).toBe(false);
  });

  test("should return false for a board with duplicate numbers in a column", () => {
    const board = [
      ["5", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      ["5", ".", ".", ".", "8", ".", ".", "7", "9"], // Duplicate '5' in column
    ];
    expect(isValidSudoku(board)).toBe(false);
  });

  test("should return true for a board with empty cells", () => {
    const board = [
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ];
    expect(isValidSudoku(board)).toBe(true);
  });

  test("should return false for a completely filled invalid board", () => {
    const board = [
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
      ["8", "8", "8", "8", "8", "8", "8", "8", "8"],
    ];
    expect(isValidSudoku(board)).toBe(false);
  });
});
